"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = exports.API_BASE_URL = void 0;
const https = __importStar(require("node:https"));
const request = (options) => {
    return new Promise((resolve, reject) => {
        const req = https.request(options, (res) => {
            let data = "";
            res.on("data", (d) => {
                data += d;
            });
            res.on("end", () => {
                data = JSON.parse(data.toString().trim());
                if (res.statusCode === 200) {
                    resolve(data);
                }
                else {
                    reject({ code: res.statusCode });
                }
            });
            res.on("error", (error) => {
                reject({ ...error });
            });
        });
        req.end();
    });
};
exports.API_BASE_URL = 'api.sportmonks.com';
class HttpClient {
    constructor(baseUrl, apiToken, timezone) {
        this.baseUrl = baseUrl;
        this.apiToken = apiToken;
        this.timezone = timezone;
        this.lastPathCalled = '';
    }
    get(path, opts) {
        const includes = opts && opts.includes && opts.includes.length > 0 ? `&include=${opts.includes.join(';')}` : '';
        const select = opts && opts.select && opts.select.length > 0 ? `&select=${opts.select.join(',')}` : '';
        const filters = opts && opts.filters ? `&filters=${Object.keys(opts.filters).map(filterId => `${filterId}:${opts.filters && opts.filters[filterId]}`).join(';')}` : '';
        const page = opts && opts.page ? `&page=${opts.page}` : '';
        const timezone = this.timezone ? `&timezone=${this.timezone}` : '';
        const pathUrl = `${path}?api_token=${this.apiToken}${includes}${select}${filters}${page}${timezone}`;
        this.lastPathCalled = this.baseUrl + pathUrl;
        return new Promise(resolve => {
            request({
                hostname: this.baseUrl,
                port: 443,
                method: 'GET',
                path: pathUrl
            })
                .then((resp) => resolve({ ok: true, ...resp }))
                .catch(err => resolve({ ok: false, error: err }));
        });
    }
}
exports.HttpClient = HttpClient;
//# sourceMappingURL=client.js.map